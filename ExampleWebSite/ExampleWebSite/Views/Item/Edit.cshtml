@model ExampleWebSite.ViewModels.Items.EditItemViewModel
<script>
    $(document).ready(function () {
        $('#datePicker').val(new Date().toDateInputValue());
    });
</script>

<div>
    <form method="post" asp-controller="Item" asp-action="Edit">
        <input asp-for="itemId"/>
        <div asp-validation-summary="ModelOnly"></div>
        <div>
            <div class="form-group">
                <span class="text-danger" asp-validation-for="Title"></span>
                <label asp-for="Title"></label>
                <input value="@Model.Title" asp-for="Title" />

            </div>
            <div class="form-group">
                <label asp-for="Tags"></label>
                <p>@ViewResourcesModel["WriteTagsWith"]</p>
                <span class="text-danger" asp-validation-for="Tags"></span>
                <input value="@Model.Tags" maxlength="40" class="input-group" id="tags" autocomplete="off" asp-for="Tags">

                <div style="height:60px" id="TagsRender">

                </div>
            </div>
        </div>

        <input hidden type="number" asp-for="collectionId" value="@Model.collectionId" />

        <div class="row justify-content-md-start">
            @if (Model.Properties != null)
            {
                int i = 0;
                foreach (var item in Model.Properties)
                {
                    if (item.Type == "number")
                    {
                        <div class="div_border_custom col-6"><b>@item.Title</b></div>
                        <div class="div_border_custom col-6">
                            <input hidden name="Properties[@i].type" value="@item.Type" type="text" />
                            <input hidden name="Properties[@i].title" value="@item.Title" type="text" />
                            <input class="bg_swap_gray input-group" maxlength="40" name="Properties[@i].value" type="number" value="@item.Value" />
                        </div>
                    }
                    if (item.Type == "string")
                    {
                        <div class="div_border_custom col-6"><b>@item.Title</b></div>
                        <div class="div_border_custom col-6">
                            <input hidden name="Properties[@i].type" value="@item.Type" type="text" />
                            <input hidden name="Properties[@i].title" value="@item.Title" type="text" />
                            <input class="bg_swap_gray input-group" maxlength="200" name="Properties[@i].value" type="text" value="@item.Value" />
                        </div>
                    }
                    if (item.Type == "bool")
                    {
                        <div class="div_border_custom col-6"><b>@item.Title</b></div>
                        <div class="div_border_custom col-6">
                            <input hidden name="Properties[@i].type" value="@item.Type" type="text" />
                            <input hidden name="Properties[@i].title" type="text" value="@item.Title" />
                            <input class="bg_swap_gray Check-icon custom-checkbox" name="Properties[@i].value" type="checkbox" value="@item.Value" />
                        </div>
                    }
                    if (item.Type == "date")
                    {
                        <div class="div_border_custom col-6"><b>@item.Title</b></div>
                        <div class="div_border_custom col-6">
                            <input hidden name="Properties[@i].type" value="@item.Type" type="text" />
                            <input hidden name="Properties[@i].title" type="text" value="@item.Title" />
                            <input class="bg_swap_gray input-group" id="datePicker" name="Properties[@i].value" type="date" value="@item.Value" />
                        </div>
                    }
                    i++;
                }
            }
        </div>
        <input type="submit" value="sent" />
    </form>
</div>

<script>
    function insert(word,len) {
        let inp = document.getElementById('tags');
        let start = inp.selectionStart;
        inp.value = inp.value.substring(0, start-len) + word +
            inp.value.substring(inp.selectionEnd, inp.value.length)
        inp.focus();
        inp.setSelectionRange(start, start + word.length)
    }

    let input = document.getElementById("tags")
    input.oninput = handleInput2;

    function handleInput2(e) {
        $("TagsRender").show();
        var len = e.target.value.length
        var indx = e.target.value.lastIndexOf(',');
        var value = e.target.value.substr(indx+1, len);
        console.log(value);

        $('#TagsRender').find('button').remove();
        $.ajax({
            type: "Get",
            url: "@Url.Action("GetTags", "Tag")",
            data: { SearchString: value },
            dataType: "text",
            success: function (data) {
                var arr2 = JSON.parse(data)
                console.log(data);
                $("#dropitem").remove();

                select = document.getElementById('TagsRender');

                arr2.forEach(el => {
                    var opt = document.createElement('button');
                    opt.innerHTML = el.title;
                    opt.setAttribute('onclick', `insert("${el.title}",${value.length}) `);
                    opt.classList.add("bg_Green");
                    opt.classList.add("btn");
                    opt.classList.add("m-auto");
                    opt.setAttribute('type', 'button');
                    select.appendChild(opt);
                });
            },
            error: function () {
            }
        })
    }
</script>